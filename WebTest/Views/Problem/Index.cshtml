@model WebTest.Models.ProblemViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="content" class="row panel well">
    <div class="panel-heading">
        <h2>@Model.Problem.Title</h2>
    </div>
    <div class="panel-body">
        @Model.Problem.Description
    </div>
    <div class="col-sm-6" style="text-align: center;">
        @using (Html.BeginForm("EvaluateCode", "Problem", FormMethod.Post))
        {
            @Html.HiddenFor(m => m.Problem.ProblemId)
            <div style="text-align:left; height:460px">
                @Html.TextAreaFor(m => m.Submission.Code, new { @class = "" })
            </div>
            <input type="submit" class="btn btn-primary myButton" value="Beküldés" style="width:200px" />
        }
    </div>
    <div class="col-sm-6">
        <textarea class="textarea form-control @(Model.Submission.IsError ? "textareaError" : (string.IsNullOrWhiteSpace(Model.Submission.Result) ? "" : "textareaValid"))">@Model.Submission.Result</textarea>
    </div>
</div>

<script type="text/javascript">
    var cEditor = CodeMirror.fromTextArea(document.getElementById("Submission_Code"), {
        lineNumbers: true,
        matchBrackets: true,
        mode: "text/x-csharp"
    });

    CodeMirror.commands.autocomplete = function (cm) {
        CodeMirror.showHint(cm, CodeMirror.hint.javascript);
    };

    cEditor.on("keyup", function (editor, event) {
        var __Cursor = editor.getDoc().getCursor();
        var __Token = editor.getTokenAt(__Cursor);

        if (!ExcludedIntelliSenseTriggerKeys[(event.keyCode || event.which).toString()] &&
           (__Token.type == "tag" ||
            __Token.string == " " ||
            __Token.string == "<" ||
            __Token.string == "/" ||
            __Token.type == null))
        {
            CodeMirror.commands.autocomplete(editor);
        }
    });

    var orig = CodeMirror.hint.javascript;
    CodeMirror.hint.javascript = function(cm) {
        var inner2 = orig(cm) 
        
        var cur = editor.getCursor();
        var token = getToken(editor, cur);

        //if (/\b(?:string|comment)\b/.test(token.type)) return;
        //token.state = CodeMirror.innerMode(editor.getMode(), token.state).state;

        //// If it's not a 'word-style' token, ignore the token.
        //if (!/^[\w$_]*$/.test(token.string)) {
        //    token = {
        //        start: cur.ch, end: cur.ch, string: "", state: token.state,
        //        type: token.string == "." ? "property" : null
        //    };
        //} else if (token.end > cur.ch) {
        //    token.end = cur.ch;
        //    token.string = token.string.slice(0, cur.ch - token.start);
        //}

        //var tprop = token;
        //// If it is a property, find out what it is a property of.
        //while (tprop.type == "property") {;
        //    tprop = getToken(editor, Pos(cur.line, tprop.start));
        //    if (tprop.string != ".") return;
        //    tprop = getToken(editor, Pos(cur.line, tprop.start));
        //    if (!context) var context = [];
        //    context.push(tprop);
        //}

        var inner = {
            from: Pos(cur.line, token.start),
            to: Pos(cur.line, token.end),
            list: ["bozo", "boros", "Csaba", "Console.Write"]
        };
        return inner;
    };

    var ExcludedIntelliSenseTriggerKeys =
    {
        "8": "backspace",
        "9": "tab",
        "13": "enter",
        "16": "shift",
        "17": "ctrl",
        "18": "alt",
        "19": "pause",
        "20": "capslock",
        "27": "escape",
        "33": "pageup",
        "34": "pagedown",
        "35": "end",
        "36": "home",
        "37": "left",
        "38": "up",
        "39": "right",
        "40": "down",
        "45": "insert",
        "46": "delete",
        "91": "left window key",
        "92": "right window key",
        "93": "select",
        "107": "add",
        "109": "subtract",
        "110": "decimal point",
        "111": "divide",
        "112": "f1",
        "113": "f2",
        "114": "f3",
        "115": "f4",
        "116": "f5",
        "117": "f6",
        "118": "f7",
        "119": "f8",
        "120": "f9",
        "121": "f10",
        "122": "f11",
        "123": "f12",
        "144": "numlock",
        "145": "scrolllock",
        "186": "semicolon",
        "187": "equalsign",
        "188": "comma",
        "189": "dash",
        "190": "period",
        "191": "slash",
        "192": "graveaccent",
        "220": "backslash",
        "222": "quote"
    }
</script>
